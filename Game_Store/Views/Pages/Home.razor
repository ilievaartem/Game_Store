@page "/"

@rendermode InteractiveServer
@inject GameController Controller

<PageTitle>Game Catalog</PageTitle>

<input type="text" @bind="searchTerm" @oninput="FilterGames" placeholder="Search by name" class="form-control mb-3" />

@if (games == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-bordered table-hover mt-2">
        <thead class="table-dark">
            <th>GameId</th>
            <th>Name</th>
            <th>Genres</th>
            <th class="text-end">Price</th>
            <th>Release Date</th>
            <th>Actions</th>
        </thead>
        <tbody>
            @foreach (var game in filteredGames)
            {
                <tr>
                    <td>@game.GameId</td>
                    <td>@game.Name</td>
                    <td>@game.Genre?.Name</td>
                    <td class="text-end">@game.Price.ToString("C2")</td>
                    <td>@game.ReleaseDate</td>
                    <td>
                        <div class="d-flex">
                            <a class="btn btn-primary me-2" role="button" href="@GameUrl(game.GameId)">
                                <i class="bi bi-pencil"></i>
                            </a>
                            <button class="btn btn-danger me-2" @onclick="() => DeleteGame(game.GameId)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <nav>
        <ul class="pagination">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => LoadPage(currentPage - 1)">Previous</button>
            </li>
            @for (var i = 1; i <= totalPages; i++)
            {
                <li class="page-item @(currentPage == i ? "active" : "")">
                    <button class="page-link" @onclick="() => LoadPage(i)">@i</button>
                </li>
            }
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => LoadPage(currentPage + 1)">Next</button>
            </li>
        </ul>
    </nav>
}

@code {
    private PaginatedList<GameSummary> games;
    private IEnumerable<GameSummary> filteredGames;
    private string searchTerm;
    private int currentPage = 1;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadPage(currentPage);
    }

    private async Task LoadPage(int page)
    {
        games = await Controller.GetGamesPagedAsync(page, 4);
        currentPage = page;
        totalPages = games.TotalPages;
        FilterGames();
    }

    private string GameUrl(int id) => $"/editgame/{id}";

    private async Task DeleteGame(int gameId)
    {
        await Controller.DeleteGameAsync(gameId);
        await LoadPage(currentPage);
    }

    private void FilterGames()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredGames = games;
        }
        else
        {
            filteredGames = games.Where(g => g.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }
    }
}
