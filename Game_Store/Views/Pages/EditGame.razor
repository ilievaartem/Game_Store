@page "/editgame"
@page "/editgame/{id:int}"

@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject GameClients GamesClient
@inject GenreClients GenresClient

<PageTitle>@title</PageTitle>

<h3>@title</h3>

@if (genres == null || game == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@game" OnValidSubmit="HandleSubmit" FormName="gameEditForm">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="name" class="form-label">Name: </label>
                    <InputText id="name" @bind-Value="game.Name" class="form-control" />
                    <ValidationMessage For="() => game.Name" />
                </div>
                <div class="mb-3">
                    <label for="genre" class="form-label">Genres: </label>
                    <InputSelect id="genre" @bind-Value="game.GenreId" class="form-control">
                        <option value="">Select a genre</option>
                        @foreach (var genre in genres)
                        {
                            <option value="@genre.Id">@genre.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => game.GenreId" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price: </label>
                    <InputNumber id="price" @bind-Value="game.Price" class="form-control" />
                    <ValidationMessage For="() => game.Price" />
                </div>
                <div class="mb-3">
                    <label for="releaseDate" class="form-label">Release Date: </label>
                    <InputDate id="releaseDate" @bind-Value="game.ReleaseDate" class="form-control" />
                </div>
                <button type="submit" class="btn btn-primary mt-2">Save</button>
                <a role="button" class="btn btn-secondary mt-2" href="/">Cancel</a>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    private GameDetails game = new GameDetails()
    {
        Name = string.Empty,
    };
    private IEnumerable<Genre> genres;
    private string title = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        genres = await GenresClient.GetGenresAsync();

        if (Id is null)
        {
            title = "New Game";
            game = new GameDetails
            {
                Name = string.Empty,
                GenreId = string.Empty,
                Price = 0,
                ReleaseDate = DateOnly.FromDateTime(DateTime.Now)
            };
        }
        else
        {
            title = "Edit Game";
            var gameSummary = await GamesClient.GetGameAsync(Id.Value);
            game = new GameDetails
            {
                Id = gameSummary.GameId,
                Name = gameSummary.Name,
                GenreId = gameSummary.GenreID.ToString(),
                Price = gameSummary.Price,
                ReleaseDate = gameSummary.ReleaseDate
            };
        }
    }

    private async Task HandleSubmit()
    {
        Console.WriteLine(game);
        if (Id is null)
        {
            var gameSummary = new GameSummary
            {
                Name = game.Name,
                GenreID = int.Parse(game.GenreId),
                Genres = string.Empty, 
                Price = game.Price,
                ReleaseDate = game.ReleaseDate
            };
            await GamesClient.AddGameAsync(gameSummary);
        }
        else
        {
            var gameSummary = await GamesClient.GetGameAsync(Id.Value);
            gameSummary.Name = game.Name;
            gameSummary.GenreID = int.Parse(game.GenreId);
            gameSummary.Genres = string.Empty; 
            gameSummary.Price = game.Price;
            gameSummary.ReleaseDate = game.ReleaseDate;
            await GamesClient.UpdateGameAsync(gameSummary);
        }

        NavigationManager.NavigateTo("/");
    }
}
